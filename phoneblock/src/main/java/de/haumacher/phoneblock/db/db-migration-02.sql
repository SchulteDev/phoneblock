--
-- Consolidate number information from SPAMREPORTS, OLDREPORTS, RATINGS, RATINGHISTORY, SEARCHES, and SEARCHHISTORY 
-- into NUMBERS and NUMBERS_HISTORY
--

-- Clear new NUMBERS table after failed attempt
-----------------------------------------------
DELETE FROM NUMBERS ;

-- Insert votes from SPAMREPORTS and OLDREPORTS
-----------------------------------------------
INSERT INTO NUMBERS (PHONE, ADDED, UPDATED, VOTES, ACTIVE) (
	SELECT s.PHONE, s.DATEADDED, s.LASTUPDATE, s.VOTES, TRUE FROM SPAMREPORTS s
);

INSERT INTO NUMBERS (PHONE, ADDED, UPDATED, VOTES, ACTIVE) (
	SELECT s.PHONE, s.DATEADDED, s.LASTUPDATE, s.VOTES, FALSE FROM OLDREPORTS s
);

-- Statistics of active and inactive numbers
--------------------------------------------
SELECT COUNT(1), ACTIVE FROM NUMBERS GROUP BY ACTIVE; 

-- Move ratings from RATINGS to NUMBERS
---------------------------------------
UPDATE NUMBERS n 
SET SEARCHES = (SELECT s.COUNT FROM SEARCHES s WHERE n.PHONE = s.PHONE),
	UPDATED = GREATEST(UPDATED, (SELECT s.LASTUPDATE FROM SEARCHES s WHERE n.PHONE = s.PHONE)) 
WHERE EXISTS (SELECT s.COUNT FROM SEARCHES s WHERE n.PHONE = s.PHONE);

UPDATE NUMBERS n 
SET PING = (SELECT s.COUNT FROM RATINGS s WHERE n.PHONE = s.PHONE AND s.RATING='C_PING'),
	UPDATED = GREATEST(UPDATED , (SELECT s.LASTUPDATE FROM RATINGS s WHERE n.PHONE = s.PHONE AND s.RATING='C_PING')) 
WHERE EXISTS (SELECT s.COUNT FROM RATINGS s WHERE n.PHONE = s.PHONE AND s.RATING='C_PING');

UPDATE NUMBERS n 
SET POLL = (SELECT s.COUNT FROM RATINGS s WHERE n.PHONE = s.PHONE AND s.RATING='D_POLL'),
	UPDATED = GREATEST(UPDATED , (SELECT s.LASTUPDATE FROM RATINGS s WHERE n.PHONE = s.PHONE AND s.RATING='D_POLL')) 
WHERE EXISTS (SELECT s.COUNT FROM RATINGS s WHERE n.PHONE = s.PHONE AND s.RATING='D_POLL');

UPDATE NUMBERS n 
SET ADVERTISING = (SELECT s.COUNT FROM RATINGS s WHERE n.PHONE = s.PHONE AND s.RATING='E_ADVERTISING'),
	UPDATED = GREATEST(UPDATED , (SELECT s.LASTUPDATE FROM RATINGS s WHERE n.PHONE = s.PHONE AND s.RATING='E_ADVERTISING')) 
WHERE EXISTS (SELECT s.COUNT FROM RATINGS s WHERE n.PHONE = s.PHONE AND s.RATING='E_ADVERTISING');

UPDATE NUMBERS n 
SET GAMBLE = (SELECT s.COUNT FROM RATINGS s WHERE n.PHONE = s.PHONE AND s.RATING='F_GAMBLE'),
	UPDATED = GREATEST(UPDATED , (SELECT s.LASTUPDATE FROM RATINGS s WHERE n.PHONE = s.PHONE AND s.RATING='F_GAMBLE')) 
WHERE EXISTS (SELECT s.COUNT FROM RATINGS s WHERE n.PHONE = s.PHONE AND s.RATING='F_GAMBLE');

UPDATE NUMBERS n 
SET FRAUD = (SELECT s.COUNT FROM RATINGS s WHERE n.PHONE = s.PHONE AND s.RATING='G_FRAUD'),
	UPDATED = GREATEST(UPDATED , (SELECT s.LASTUPDATE FROM RATINGS s WHERE n.PHONE = s.PHONE AND s.RATING='G_FRAUD')) 
WHERE EXISTS (SELECT s.COUNT FROM RATINGS s WHERE n.PHONE = s.PHONE AND s.RATING='G_FRAUD');

UPDATE NUMBERS n 
SET LEGITIMATE = (SELECT s.COUNT FROM RATINGS s WHERE n.PHONE = s.PHONE AND s.RATING='A_LEGITIMATE'),
	UPDATED = GREATEST(UPDATED , (SELECT s.LASTUPDATE FROM RATINGS s WHERE n.PHONE = s.PHONE AND s.RATING='A_LEGITIMATE')) 
WHERE EXISTS (SELECT s.COUNT FROM RATINGS s WHERE n.PHONE = s.PHONE AND s.RATING='A_LEGITIMATE');

-- Update aggregation tables
----------------------------
DELETE FROM SPAMREPORTS_10 ;

INSERT INTO SPAMREPORTS_10 (PREFIX, CNT, VOTES) (
	SELECT a.prefix prefix, COUNT(1) cnt, SUM(a.votes) votes FROM (
		SELECT SUBSTRING(s.PHONE, 0, LENGTH(s.phone) - 1) prefix, s.VOTES votes 
		FROM SPAMREPORTS s
	) a
	GROUP BY a.prefix
);

DELETE FROM SPAMREPORTS_100 ;

INSERT INTO SPAMREPORTS_100 (PREFIX, CNT, VOTES) (
	SELECT a.prefix prefix, COUNT(1) cnt, SUM(a.votes) votes FROM (
		SELECT SUBSTRING(s.PREFIX, 0, LENGTH(s.PREFIX) - 1) prefix, s.VOTES votes 
		FROM SPAMREPORTS_10 s
		WHERE s.CNT >= 4
	) a
	GROUP BY a.prefix
);

-- Copy SEARCHHISTORY
INSERT INTO NUMBERS_HISTORY (CLUSTER, PHONE, SEARCHES) (
	SELECT s.CLUSTER, s.PHONE, s.COUNT FROM SEARCHHISTORY s
);

-- Create missing entries required to copy RATINGHISTORY contents
INSERT INTO NUMBERS_HISTORY (CLUSTER, PHONE) (
	SELECT DISTINCT s.REV, s.PHONE FROM RATINGHISTORY s
	LEFT OUTER JOIN NUMBERS_HISTORY h ON h.CLUSTER = s.REV AND h.PHONE = s.PHONE
	WHERE h.PHONE IS NULL 
);

-- Move rating history to NUMBERS_HISTORY
UPDATE NUMBERS_HISTORY n 
SET LEGITIMATE = (
	SELECT s.COUNT FROM RATINGHISTORY s WHERE s.REV = n.CLUSTER AND s.PHONE = n.PHONE AND s.RATING = 'A_LEGITIMATE'
)	 
WHERE EXISTS (
	SELECT s.COUNT FROM RATINGHISTORY s WHERE s.REV = n.CLUSTER AND s.PHONE = n.PHONE AND s.RATING = 'A_LEGITIMATE'
);

UPDATE NUMBERS_HISTORY n 
SET PING = (
	SELECT s.COUNT FROM RATINGHISTORY s WHERE s.REV = n.CLUSTER AND s.PHONE = n.PHONE AND s.RATING = 'C_PING'
)	 
WHERE EXISTS (
	SELECT s.COUNT FROM RATINGHISTORY s WHERE s.REV = n.CLUSTER AND s.PHONE = n.PHONE AND s.RATING = 'C_PING'
);

UPDATE NUMBERS_HISTORY n 
SET POLL = (
	SELECT s.COUNT FROM RATINGHISTORY s WHERE s.REV = n.CLUSTER AND s.PHONE = n.PHONE AND s.RATING = 'D_POLL'
)	 
WHERE EXISTS (
	SELECT s.COUNT FROM RATINGHISTORY s WHERE s.REV = n.CLUSTER AND s.PHONE = n.PHONE AND s.RATING = 'D_POLL'
);

UPDATE NUMBERS_HISTORY n 
SET ADVERTISING = (
	SELECT s.COUNT FROM RATINGHISTORY s WHERE s.REV = n.CLUSTER AND s.PHONE = n.PHONE AND s.RATING = 'E_ADVERTISING'
)	 
WHERE EXISTS (
	SELECT s.COUNT FROM RATINGHISTORY s WHERE s.REV = n.CLUSTER AND s.PHONE = n.PHONE AND s.RATING = 'E_ADVERTISING'
);

UPDATE NUMBERS_HISTORY n 
SET GAMBLE = (
	SELECT s.COUNT FROM RATINGHISTORY s WHERE s.REV = n.CLUSTER AND s.PHONE = n.PHONE AND s.RATING = 'F_GAMBLE'
)	 
WHERE EXISTS (
	SELECT s.COUNT FROM RATINGHISTORY s WHERE s.REV = n.CLUSTER AND s.PHONE = n.PHONE AND s.RATING = 'F_GAMBLE'
);

UPDATE NUMBERS_HISTORY n 
SET FRAUD = (
	SELECT s.COUNT FROM RATINGHISTORY s WHERE s.REV = n.CLUSTER AND s.PHONE = n.PHONE AND s.RATING = 'G_FRAUD'
)	 
WHERE EXISTS (
	SELECT s.COUNT FROM RATINGHISTORY s WHERE s.REV = n.CLUSTER AND s.PHONE = n.PHONE AND s.RATING = 'G_FRAUD'
);

--
-- Convert NUMBERS_HISTORY to a table with running sums
-- These queries are inefficient, since a quadratic operation is performed by the database, but is unclear how to optimize.
--
UPDATE NUMBERS_HISTORY n 
SET 
	n.SEARCHES = n.SEARCHES + COALESCE(
		(SELECT SUM(s.SEARCHES) FROM NUMBERS_HISTORY s WHERE s.PHONE = n.PHONE AND s.CLUSTER < n.CLUSTER), 
		0
	)
;

UPDATE NUMBERS_HISTORY n 
SET 
	n.LEGITIMATE = n.LEGITIMATE + COALESCE(
		(SELECT SUM(s.LEGITIMATE) FROM NUMBERS_HISTORY s WHERE s.PHONE = n.PHONE AND s.CLUSTER < n.CLUSTER), 
		0
	)
;

UPDATE NUMBERS_HISTORY n 
SET 
	n.PING = n.PING + COALESCE(
		(SELECT SUM(s.PING) FROM NUMBERS_HISTORY s WHERE s.PHONE = n.PHONE AND s.CLUSTER < n.CLUSTER), 
		0
	)
;

UPDATE NUMBERS_HISTORY n 
SET 
	n.POLL = n.POLL + COALESCE(
		(SELECT SUM(s.POLL) FROM NUMBERS_HISTORY s WHERE s.PHONE = n.PHONE AND s.CLUSTER < n.CLUSTER), 
		0
	)
;

UPDATE NUMBERS_HISTORY n 
SET 
	n.ADVERTISING = n.ADVERTISING + COALESCE(
		(SELECT SUM(s.ADVERTISING) FROM NUMBERS_HISTORY s WHERE s.PHONE = n.PHONE AND s.CLUSTER < n.CLUSTER), 
		0
	)
;

UPDATE NUMBERS_HISTORY n 
SET 
	n.GAMBLE = n.GAMBLE + COALESCE(
		(SELECT SUM(s.GAMBLE) FROM NUMBERS_HISTORY s WHERE s.PHONE = n.PHONE AND s.CLUSTER < n.CLUSTER), 
		0
	)
;

UPDATE NUMBERS_HISTORY n 
SET 
	n.FRAUD = n.FRAUD + COALESCE(
		(SELECT SUM(s.FRAUD) FROM NUMBERS_HISTORY s WHERE s.PHONE = n.PHONE AND s.CLUSTER < n.CLUSTER), 
		0
	)
;

-- Copy votes from NUMBERS to NUMBERS_HISTORY, since no historic information is available here.
UPDATE NUMBERS_HISTORY n 
SET VOTES = COALESCE (
	(SELECT s.VOTES FROM NUMBERS s WHERE s.PHONE = n.PHONE), 0
);

