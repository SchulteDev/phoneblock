package de.haumacher.phoneblock.db.settings;

option NoInterfaces;
option NoXml;

/** Account settings. */
message UserSettings {
	/** The internal user ID. */
	long id;
	
	/** The user's login name */
	string login;
	
	/** The user's real name. */
	string displayName;
	
	/** The preferred language of the user. */
	string lang;
	
	/** The user's e-mail address. */
	string email;
	
	/** Minumum number of votes to create a blocklist entry. */
	int minVotes;
	
	/** Maximum number of blocklist entries. */
	int maxLength;
	
	/** Whether multiple adjacent numbers should be joined to a wildcard number. */
	bool wildcards;
	
	/** Timestamp when the user requested the blocklist last time */
	long lastAccess;
	
	/** The sum of donations done by this user in cent. */
	int credit;
}

/** A user's authorization token. */
message AuthToken {
	/** The token ID */
	long id;
	
	/** The ID of the user that owns this token. */
	long userId;
	
	/** The login name of the user that owns this token. */
	string userName;
	
	/** A user-defined label for this token (for explicitly created tokens only). */
	string label;
	
	/** Time when this token was created */
	long created;
	
	/** The hash of this token's secret. */
	bytes pwHash;
	
	/** Whether this is an implicitly created token for the "stay logged-in" functionality. */
	boolean implicit;
	
	/** Whether this token has access to the query API. */
	boolean accessQuery;

	/** Whether this token has access to the blocklist download API. */
	boolean accessDownload;
	
	/** Whether this token has access to the CARDDAV synchronization API. */
	boolean accessCarddav;
	
	/** Whether this token has access to the rate API. */
	boolean accessRate;
	
	/** Whether this token is allowed to log-in to the website. */
	boolean accessLogin;
	
	/** When this token was used or updated the last time. */
	long lastAccess;
	
	/** The user agent that used this token the last time. */
	string userAgent;
	
	/** The encoded token that must be used by the client for authorization. */
	string token;
}

/** Common options of answer bot settings. */
abstract message AnswerBotSetting {
	/** ID of the answer bot. */
	long id;

	/** ID of the PhoneBlock user. */
	long userId;
	
	/** Time when the setting was created. */
	long created;
	
	/** Time when the setting was last updated. */
	long updated;
}

/** Configuration options and state of an answer bot. */
message AnswerBotDynDns extends AnswerBotSetting {
	/** The user name for DynDNS update and SIP registration. */
	string dyndnsUser;
	
	/** Password hash for DynDNS update. */
	string dynDnsPasswd;
	
	/** IPv4 address transmitted during the last DynDNS update. */
	string ipv4;
	
	/** IPv6 address transmitted during the last DynDNS update. */
	string ipv6;
}

message AnswerBotSip extends AnswerBotSetting {	
	/** Static host name configured for the user's box. */
	string host;
	
	/** IPv4 address transmitted during the last DynDNS update. */
	string ipv4;
	
	/** IPv6 address transmitted during the last DynDNS update. */
	string ipv6;
	
	/** Whether to use the IPv4 address for communication, even if an IPv6 address is available. */
	bool preferIPv4;

    /** The SIP name of the user's box. */	
	string registrar;
	
    /** The SIP domain for authentication at the user's box. */	
	string realm;
	
    /** The user name for SIP registration at the user's box. */	
	string userName;

    /** The password used for SIP registration at the user's box. */	
	string passwd;

	/** 
	 * The minimum PhoneBlock votes to consider a call as SPAM and accept it. 
	 */
	int minVotes;
	
	/** 
	 * Whether to block whole number ranges, when a great density of nearby SPAM numbers is detected. 
	 */
	bool wildcards;

	/** Whether this answer bot is currently registered successfully. */
	bool registered;
	
	/** The last message transmitted while registering. */
	string registerMessage;
	
	/** Time of the last successful registration. */
	long lastSuccess;
	
    /** The number of calls accepted by this answer bot. */	
	int callsAccepted;
}

message Contribution {
	/** Internal ID of the contribution. */
	long id;

	/** ID of the user that donated (if known). */
	@Nullable
	long userId;

	/** Name of the donator. */
	string sender;

	/** Transaction ID of the donation (external). */
	string tx;

	/** The amount in cent. */
	int amount;

	/** The optional message that was sent together with the donation. */
	string `message`;

	/** The date, when the donation was received. */
	long received;

	/** Whether an thank you e-mail was sent. */
	boolean acknowledged;
}
